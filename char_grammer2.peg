# PEG Grammar for Chai Language

chai_program       <- statement*

# --- Statements ---
statement          <- function_def / let_stmt / pipeline_stmt / verify_stmt / policy_stmt / control_stmt / comment / newline

function_def       <- 'def' identifier '(' parameter_list? ')' block
let_stmt           <- 'let' identifier '=' expression newline?
pipeline_stmt      <- expression (flow_op expression)+ newline?
verify_stmt        <- 'verify' '(' expression ')' verify_mod? newline?
policy_stmt        <- 'policy' policy_body newline?
control_stmt       <- if_expr / while_loop / break_stmt / continue_stmt

# --- Expressions ---
expression         <- agent_call / literal / identifier / paren_expr
paren_expr         <- '(' expression ')'
agent_call         <- identifier '(' arg_list? ')'

arg_list           <- expression (',' expression)*
parameter_list     <- identifier (',' identifier)*

# --- Flow Operators ---
flow_op            <- '->' / '|' / 'or' / '&' / '||'

# --- Verify Modifiers ---
verify_mod         <- '?' 'using' identifier

# --- Policy ---
policy_body        <- '(' policy_kv (',' policy_kv)* ')' / function_def
policy_kv          <- identifier ':' identifier

# --- Control Flow ---
if_expr            <- 'let' identifier '=' 'if' expression 'then' expression 'else' expression newline?
while_loop         <- 'do' expression 'while' expression newline?
break_stmt         <- 'break' ('if' expression)? newline?
continue_stmt      <- 'continue' ('if' expression)? newline?

# --- Literals and Identifiers ---
literal            <- number / string / boolean
number             <- [0-9]+ ('.' [0-9]+)?
string             <- '"' .*? '"'
boolean            <- 'true' / 'false'
identifier         <- !keyword [a-zA-Z_][a-zA-Z0-9_]*

# --- Misc ---
comment            <- '#' ~'\n'*
newline            <- '\n' / '\r'? '\n'

# --- Keywords ---
keyword            <- 'def' / 'let' / 'if' / 'then' / 'else' / 'do' / 'while' / 'break' / 'continue' / 'true' / 'false' / 'policy' / 'verify' / 'using' / 'or'
